/* 
Implement a function called updateScore. This function must verify that one button from each property is selected.
Using JavaScript, add a click or change event listener to each radio button (Do not add the event listener to the button label). Notice that the radio buttons are hidden using CSS.
Once one button from each property is selected, the webpage should:
    Hide the warning label by setting the display style of the <div> with ID warning to none. Note: both none and hidden have similar visual effects, however none doesn't occupy any space, while hidden does occupy space, affecting the layout).
    Compute the vulnerability score.
    The score should be updated and displayed inside the <div> with ID score.
The score must have a minimum of 0 and a maximum of 10.
The final score must be rounded up to the tenths decimal place, and displayed with one decimal place. Ex: If the final score is 7.311456, the score should be displayed as 7.4.
Once the score is being displayed, updating a property will automatically update the vulnerability score.

The score is computed as: 

Score-final = Scope-status * ((3.326258289 * Score-base) + (1.1 * Score-exploitability))
    
    Scope-status = Selection is unchanged ? 1.0 : 1.08
    
    Score-base = Base-confidentiality + Base-integrity + Base Availability
        
        Base-confidentiality.Level-sensitivity.Level-confidentiality = {
            none: {
                none: 0.00, 
                low: 0.22, 
                high: 0.56
            }, 
            low: {
                none: 0.00, 
                low: 0.65, 
                high: 0.75
            },
            high: {
                none: 0.00, 
                low: 0.85, 
                high: 0.95}
        }

        Base-integrity.Level-healthImpact.Level-integrity = {
            none: {
                none: 0.0, 
                low: 0.22, 
                high: 0.56
            },
            low: {
                none: 0.55,
                low: 0.60,
                high: 0.75
            },
            high: {
                none: 0.85,
                low: 0.90,
                high: 0.95
            }
        }

        Base-availability.Level-healthImpact.Level-availability = {
            none: {
                none: 0.0, 
                low: 0.22, 
                high: 0.56
            },
            low: {
                none: 0.55,
                low: 0.60,
                high: 0.65
            },
            high: {
                none: 0.85,
                low: 0.90,
                high: 0.95
            }
        }

    Scope-exploitability = Attack-vector * Attack-complexity * Privileged-required * User-interaction

        Attack-vector = {
            network: 0.85,
            adjacent-network: 0.62,
            local: 0.55,
            physical: 0.2,
        }

        Attack-complexity = {
            low: 0.77,
            high: 0.44
        }

        Privilege-required = {
            none: 0.85,
            low: 0.62,
            high: 0.27
        }

        User-interaction = {
            none: 0.85,
            required: 0.62
        }

*/

window.addEventListener("DOMContentLoaded", domLoaded);

function allFieldsChecked() {
    const warning = document.getElementById("warning")
    checkGroups:
    for (let group of ALL_FIELDS){
        for (let option of group){
            if (option.checked) {
                continue checkGroups
            }
        }
        warning.style.display = "block"
        return false
    }
    // Hide the warning label by setting the display style of the <div> with ID warning to none
    warning.style.display = "none"
    return true
}

function calculateScore() {
    // Compute the vulnerability score
    let health_impact = document.querySelector(`input[name="health"]:checked`).value
        
    let scoreExploitability = attackVector[document.querySelector(`input[name="AV"]:checked`).value] * attackComplexity[document.querySelector(`input[name="AC"]:checked`).value] * privilegeRequired[document.querySelector(`input[name="PR"]:checked`).value] * userInteraction[document.querySelector(`input[name="UI"]:checked`).value]
    let baseAvailability = baseAvailabilityTable[health_impact][document.querySelector(`input[name="avail"]:checked`).value]
    let baseIntegrity = baseIntegrityTable[health_impact][document.querySelector(`input[name="integ"]:checked`).value]
    let baseConfidentiality = baseConfidentialityTable[document.querySelector(`input[name="sens"]:checked`).value][document.querySelector(`input[name="conf"]:checked`).value]
    let scopeStatus = scopeStatusTable[document.querySelector(`input[name="scope"]:checked`).value]

    let scoreFinal

    let scoreBase = baseConfidentiality + baseIntegrity + baseAvailability
    if (scoreBase == 0){
        return "0.0"
    }
    scoreFinal = scopeStatus * ((3.326258289 * scoreBase) + (1.1 * scoreExploitability))
    // The score must have a minimum of 0 and a maximum of 10
    if (scoreFinal <= 0) {
        return "0.0"
    }
    else if (scoreFinal >= 10) {
        return "10.0"
    }
    else {
        scoreFinal *= 10
        scoreFinal = Math.trunc(scoreFinal)
        scoreFinal ++
        scoreFinal /= 10
        return scoreFinal.toFixed(1)
    }
}

function updateScore() {
	// verify that one button from each property is selected
    if (allFieldsChecked()){
        // The score should be updated and displayed inside the <div> with ID score
        let scoreField = document.getElementById("score")
        scoreField.innerText = calculateScore()
    }
}

function domLoaded() {
    // add a click or change event listener to each radio button
    for (let group of ALL_FIELDS){
        for (let option of group){
            option.addEventListener("change", updateScore)
        }
    }
}

const AV = document.getElementsByName("AV")
const SCOPE = document.getElementsByName("scope")
const AC = document.getElementsByName("AC")
const PR = document.getElementsByName("PR")
const UI = document.getElementsByName("UI")
const HEALTH = document.getElementsByName("health")
const AVAIL = document.getElementsByName("avail")
const CONF = document.getElementsByName("conf")
const INTEG = document.getElementsByName("integ")
const SENS = document.getElementsByName("sens")

const ALL_FIELDS = [AV, SCOPE, AC, PR, UI, HEALTH, AVAIL, CONF, INTEG, SENS]

// input[name="scope"]:checked
const scopeStatusTable = {
    scope_U: 1.0,
    scope_C: 1.08
}

// input[name="AV"]:checked
const attackVector = {
    AV_N: 0.85,
    AV_A: 0.62,
    AV_L: 0.55,
    AV_P: 0.2,
}

// input[name="AC"]:checked
const attackComplexity = {
    AC_L: 0.77,
    AC_H: 0.44
}

// input[name="PR"]:checked
const privilegeRequired = {
    PR_N: 0.85,
    PR_L: 0.62,
    PR_H: 0.27
}

// input[name="UI"]:checked
const userInteraction = {
    UI_N: 0.85,
    UI_R: 0.62
}

// `input[name="health"]:checked`.`input[name="avail"]:checked`
const baseAvailabilityTable = {
    health_N: {
        avail_N: 0.0, 
        avail_L: 0.22, 
        avail_H: 0.56
    },
    health_L: {
        avail_N: 0.55,
        avail_L: 0.60,
        avail_H: 0.65
    },
    health_H: {
        avail_N: 0.85,
        avail_L: 0.90,
        avail_H: 0.95
    }
}

// `input[name="health"]:checked`.`input[name="integ"]:checked`
const baseIntegrityTable = {
    health_N: {
        integ_N: 0.0, 
        integ_L: 0.22, 
        integ_H: 0.56
    },
    health_L: {
        integ_N: 0.55,
        integ_L: 0.60,
        integ_H: 0.75
    },
    health_H: {
        integ_N: 0.85,
        integ_L: 0.90,
        integ_H: 0.95
    }
}

// `input[name="sens"]:checked`.`input[name="conf"]:checked`
const baseConfidentialityTable = {
    sens_N: {
        conf_N: 0.00, 
        conf_L: 0.22, 
        conf_H: 0.56
    }, 
    sens_L: {
        conf_N: 0.00, 
        conf_L: 0.65, 
        conf_H: 0.75
    },
    sens_H: {
        conf_N: 0.00, 
        conf_L: 0.85, 
        conf_H: 0.95}
}
